@using System.Globalization;

<FluentTextField Readonly="@Readonly"
                 Disabled="@Disabled"
                 Id="@Id"
                 Immediate="@Immediate"
                 ImmediateDelay="@ImmediateDelay"
                 Autofocus="@Autofocus"
                 DisplayName="@DisplayName"
                 Placeholder="@Placeholder"
                 Name="@Name"
                 Required="@Required"
                 @bind-Value="@valueText"
                 AfterBindValue="@DisplayChanged"
                 Appearance="@Appearance"
                 Class="@Class"
                 Style="@Style"
                 Size="@Size">
    @ChildContent
</FluentTextField>

@code {
    [Parameter]
    public double Value
    {
        get => oldValue;
        set
        {
            if (this.oldValue != value)
            {
                ValueChanged.InvokeAsync(value);
                this.oldValue = value;
            }
        }
    }
    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }
    [Parameter]
    public EventCallback<double> AfterBindValue { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public CultureInfo CultureInfo { get; set; } = CultureInfo.CurrentCulture;
    [Parameter]
    public FluentInputAppearance Appearance { get; set; } = FluentInputAppearance.Outline;
    [Parameter]
    public string? Class { get; set; }
    [Parameter]
    public string? Style { get; set; }
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Placeholder { get; set; }
    [Parameter]
    public int Size { get; set; }
    [Parameter]
    public bool Required { get; set; }
    [Parameter]
    public bool Readonly { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public bool Immediate { get; set; }
    [Parameter]
    public int ImmediateDelay { get; set; }
    [Parameter]
    public string? Name { get; set; }
    [Parameter]
    public string? DisplayName { get; set; }
    [Parameter]
    public bool Autofocus { get; set; }

    private double oldValue = 0;
    private string valueText = "";

    protected override void OnParametersSet()
    {
        valueText = Value.ToString("C");
    }

    async Task DisplayChanged(string? newDisplay)
    {
        if (double.TryParse(newDisplay, NumberStyles.AllowCurrencySymbol | NumberStyles.Currency, CultureInfo, out double newValue))
        {
            Value = newValue;
            await AfterBindValue.InvokeAsync(Value);
        }
    }
}
