@page "/tools/amortization-calculator"

<FluentToolbar Style="width: 100%;">
    <FluentButton OnClick="@(() => loans.Add(new AmortizedLoanModel()))" IconStart="@(new Icons.Regular.Size24.Add())">New Loan</FluentButton>
    <FluentButton OnClick="@Calculate" IconStart="@(new Icons.Regular.Size24.Calculator())">Calculate</FluentButton>
</FluentToolbar>
@foreach (var loan in loans)
{
    var item = loan;
    <LoanCard InlineForm @key="item" @bind-Value="@item" />
}
@if (payments.Any())
{
    <FluentDataGrid TGridItem="string">
        <FluentDataGridRow RowType="DataGridRowType.Header" GridTemplateColumns="@gridRowTemplate">
            <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">Payment Number</FluentDataGridCell>
            @{
                var i = 1;
            }
            @foreach (var loan in payments)
            {
                <FluentDataGridCell GridColumn="@(++i)" CellType="DataGridCellType.ColumnHeader">@loan.Key Principal</FluentDataGridCell>
            }
            @foreach (var loan in payments)
            {
                <FluentDataGridCell GridColumn=(++i) CellType="DataGridCellType.ColumnHeader">@loan.Key Interest</FluentDataGridCell>
            }
            @foreach (var loan in payments)
            {
                <FluentDataGridCell GridColumn=(++i) CellType="DataGridCellType.ColumnHeader">@loan.Key Total</FluentDataGridCell>
            }
        </FluentDataGridRow>
        @foreach (var j in Enumerable.Range(1, numberOfPayments))
        {
            <FluentDataGridRow RowIndex="@j" RowType="DataGridRowType.Default" GridTemplateColumns="@gridRowTemplate">
                <FluentDataGridCell GridColumn="1" CellType="DataGridCellType.RowHeader">@j</FluentDataGridCell>
            
                @{
                    var i = 1;
                }
                @foreach (var loan in payments)
                {
                    @if (loan.Value.Count() > j)
                    {
                        <FluentDataGridCell GridColumn="@(++i)" CellType="DataGridCellType.Default">@loan.Value[j].Principal.ToString("C")</FluentDataGridCell>
                    }
                    else
                    {
                        <FluentDataGridCell GridColumn="@(++i)" CellType="DataGridCellType.Default"></FluentDataGridCell>
                    }
                }
                @foreach (var loan in payments)
                {
                    @if (loan.Value.Count() > j)
                    {
                        <FluentDataGridCell GridColumn="@(++i)" CellType="DataGridCellType.Default">@loan.Value[j].Interest.ToString("C")</FluentDataGridCell>
                    }
                    else
                    {
                        <FluentDataGridCell GridColumn="@(++i)" CellType="DataGridCellType.Default"></FluentDataGridCell>
                    }
                }
                @foreach (var loan in payments)
                {
                    @if (loan.Value.Count() > j)
                    {
                        <FluentDataGridCell GridColumn="@(++i)" CellType="DataGridCellType.Default">@loan.Value[j].Total.ToString("C")</FluentDataGridCell>
                    }
                    else
                    {
                        <FluentDataGridCell GridColumn="@(++i)" CellType="DataGridCellType.Default"></FluentDataGridCell>
                    }
                }
            </FluentDataGridRow>
        }
    </FluentDataGrid>
}

@code {
    bool calculating = false;

    List<AmortizedLoanModel> loans = new();
    Dictionary<string, LoanPayment[]> payments = new();

    int numberOfPayments => payments.Select(loan => loan.Value.Count()).Max();

    string gridRowTemplate => string.Join(" ", Enumerable.Range(0, loans.Count() * 3).Select(i => "1fr"));

    async Task Calculate()
    {
        calculating = true;
        await Task.Delay(TimeSpan.FromSeconds(1));

        payments = loans.ToDictionary(loan => loan.Name, loan => loan.RemainingPayments().ToArray());

        calculating = false;
        await Task.Delay(TimeSpan.FromSeconds(1));
    }
}
