@inherits FluentComponentBase

<div class="@ClassValue" style="@StyleValue" @attributes="AdditionalAttributes">
    @ChildContent
</div>

@code {
    protected string? ClassValue => new CssBuilder(Class)
        .AddClass("stack-horizontal", () => Orientation == Orientation.Horizontal)
        .AddClass("stack-vertical", () => Orientation == Orientation.Vertical)
        .Build();

    protected string? StyleValue => new StyleBuilder()
        .AddStyle("align-items", GetHorizontalAlignment(), () => Orientation == Orientation.Vertical)
        .AddStyle("justify-content", GetVerticalAlignment(), () => Orientation == Orientation.Vertical)

        .AddStyle("justify-content", GetHorizontalAlignment(), () => Orientation == Orientation.Horizontal)
        .AddStyle("align-items", GetVerticalAlignment(), () => Orientation == Orientation.Horizontal)

        .AddStyle("column-gap", $"{HorizontalGap}px", () => HorizontalGap.HasValue)
        .AddStyle("row-gap", $"{VerticalGap}px", () => VerticalGap.HasValue)
        .AddStyle("width", Width, () => !string.IsNullOrEmpty(Width))
        .AddStyle("flex-wrap", "wrap", () => Wrap)

        .AddStyle(Style)
        .Build();

    /// <summary>
    /// The horizontal alignment of the components in the stack. 
    /// </summary>
    [Parameter]
    public FluentStackHorizontalAlignment HorizontalAlignment { get; set; } = FluentStackHorizontalAlignment.Left;

    /// <summary>
    /// The vertical alignment of the components in the stack.
    /// </summary>
    [Parameter]
    public FluentStackVerticalAlignment VerticalAlignment { get; set; } = FluentStackVerticalAlignment.Top;

    /// <summary>
    /// Gets or set the orientation of the stacked components. 
    /// </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Horizontal;

    /// <summary>
    /// The width of the stack as a percentage string (default = 100%).
    /// </summary>
    [Parameter]
    public string? Width { get; set; } = "100%";

    /// <summary>
    /// Gets or sets if the stack wraps.
    /// </summary>
    [Parameter]
    public bool Wrap { get; set; } = false;

    /// <summary>
    /// Gets or sets the gap between horizontally stacked components (in pixels).
    /// </summary>
    [Parameter]
    public int? HorizontalGap { get; set; } = 10;

    /// <summary>
    /// Gets or sets the gap between vertically stacked components (in pixels).
    /// </summary>
    [Parameter]
    public int? VerticalGap { get; set; } = 10;

    /// <summary>
    /// Gets or sets the content to be rendered inside the component.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string GetHorizontalAlignment()
    {
        return HorizontalAlignment switch
        {
            FluentStackHorizontalAlignment.Left => "start",
            FluentStackHorizontalAlignment.Center => "center",
            FluentStackHorizontalAlignment.Right => "end",
            _ => "start",
        };
    }

    private string GetVerticalAlignment()
    {
        return VerticalAlignment switch
        {
            FluentStackVerticalAlignment.Top => "start",
            FluentStackVerticalAlignment.Center => "center",
            FluentStackVerticalAlignment.Bottom => "end",
            _ => "start",
        };
    }
}
