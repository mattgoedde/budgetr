@page "/budget"

@inject ISnackbar Snackbar
@inject IAuthorizationProvider AuthProvider
@inject IBudgetrApi _budgetService;

@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<PageTitle>Budgetr - Budget</PageTitle>
@if (_budget is not null)
{
    <CascadingValue TValue="EventCallback<Budget>" Value="_budgetChanged" IsFixed>
        <CascadingValue TValue="Budget" Value="_budget">
            <MudTabs Centered Color="@Color.Dark" PanelClass="pa-6" Elevation="4" @ref="_tabs">
                <MudTabPanel Icon="@Icons.Material.Filled.AttachMoney" Text="Income">
                    <IncomeTab />
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.House" Text="Housing">
                    <HousingTab />
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.DirectionsCar" Text="Transportation">
                    <TransportationTab />
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.AccountBalance" Text="Loans">
                    <OtherLoansTab />
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.LiveTv" Text="Expenses">
                    <ExpensesTab />
                </MudTabPanel>
            </MudTabs>
        </CascadingValue>
    </CascadingValue>
}

@code {
    private Budget? _budget;
    private EventCallback<Budget> _budgetChanged;
    private Guid _userId;

    private MudTabs? _tabs = new();
    private int _activeIndex = 0;

    private void SwipeAreaSwiped(SwipeDirection dir)
    {
        switch (dir)
        {
            case SwipeDirection left when left == SwipeDirection.RightToLeft && _activeIndex < 4:
                _activeIndex++;
                break;
            case SwipeDirection right when right == SwipeDirection.LeftToRight && _activeIndex > 0:
                _activeIndex--;
                break;
            default:
                break;
        }
        _tabs?.ActivatePanel(_activeIndex);
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialize cascading event handler
        _budgetChanged = new(this, BudgetChangedHandler);
        
        // Get User Id
        _userId = await AuthProvider.GetUserIdAsync() ?? Guid.Empty;

        if (_userId != Guid.Empty)
            await InitializeBudget();
    }

    private async Task InitializeBudget()
    {
        if (_userId != Guid.Empty)
            _budget = await _budgetService.GetLatestAsync(_userId);

        if (_budget is null)
        {
            _budget = Budget.New();
            await _budgetChanged.InvokeAsync(_budget);
            return;
        }
        else
            return;
    }

    private async Task BudgetChangedHandler(Budget updatedBudget)
    {
        _budget = await _budgetService.UpdateAsync(_userId, updatedBudget.Id, updatedBudget.Convert());
    }
}
