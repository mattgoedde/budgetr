@inject ISnackbar Snackbar

@inject ILogger<OtherLoansTab> Logger

@if (Budget?.OtherLoans is not null)
{
    <MudGrid>
        @foreach (var loan in Budget.OtherLoans) 
        {
            <MudItem xs="12" md="2">
                <LoanCard Loan="loan"
                    LoanChanged="((newLoan) => OtherLoanChanged(loan.GetHashCode(), newLoan))" 
                    LoanDeleted="((delLoan) => OtherLoanDeleted(loan.GetHashCode(), delLoan))" />
            </MudItem>
        }
    </MudGrid>
    <MudFab Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="position: fixed; right: 1rem; bottom: 1rem;" OnClick="AddOtherLoanClicked"/>
}

@code {
    [CascadingParameter]
    Budget? Budget { get; set; }

    [CascadingParameter]
    EventCallback<Budget> BudgetChanged { get; set; }


    private async Task OtherLoanChanged(int oldHashCode, AmortizedLoan loan)
    {
        if (Budget?.OtherLoans is null) return;
        try 
        {
            var otherLoans = Budget.OtherLoans.Where(i => i.GetHashCode() != oldHashCode);
            Budget = Budget with { OtherLoans = Budget.OtherLoans.Append(loan) };
            
            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to update loan", Severity.Warning);
        }
    }

    private async Task OtherLoanDeleted(int oldHashCode, AmortizedLoan loan)
    {
        if (Budget?.OtherLoans is null) return;
        try 
        {
            Budget = Budget with { OtherLoans = Budget.OtherLoans.Where(i => i.GetHashCode() != oldHashCode) };
            
            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to delete loan", Severity.Warning);
        }
    }

    private async Task AddOtherLoanClicked()
    {
        if (Budget is null) return;
        if (Budget.OtherLoans is null) 
            Budget = Budget with { OtherLoans = new List<AmortizedLoan>() };
        
        Budget = Budget with { OtherLoans = Budget.OtherLoans.Append(AmortizedLoan.New()) };

        Logger.LogTrace("Budget changed");
        await BudgetChanged.InvokeAsync(Budget);
    }
}