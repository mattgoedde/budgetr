@inject ISnackbar Snackbar

@inject ILogger<HousingTab> Logger

@if (Budget?.HousingLoans is not null)
{
    <MudGrid>
        @foreach (var loan in Budget.HousingLoans)
        {
            <MudItem xs="12" md="2">
                <LoanCard Loan="loan" LoanChanged="((newLoan) => MortgageChanged(loan.GetHashCode(), newLoan))" LoanDeleted="((delLoan) => MortgageDeleted(loan.GetHashCode(), delLoan))" />
            </MudItem>
        }
    </MudGrid>
    @if (Budget.HousingLoans.Any() && Budget.Expenses.Any(e => e.ExpenseType ==
    ExpenseType.Housing))
    {
        <MudDivider Class="my-4" />
    }
    <MudGrid>
        @foreach (var expense in Budget.Expenses.Where(e => e.ExpenseType == ExpenseType.Housing))
        {
            <MudItem xs="12" md="2">
                <ExpenseCard Expense="expense"
        ExpenseChanged="((newExpense) => ExpenseChanged(expense.GetHashCode(), newExpense))"
        ExpenseDeleted="((delExpense) => ExpenseDeleted(expense.GetHashCode(), delExpense))" />
            </MudItem>
        }
    </MudGrid>
    <MudMenu Style="position: fixed; right: 1rem; bottom: 1rem;">
        <ActivatorContent>
            <MudFab Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" />
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem OnClick="AddMortgageClicked">Add Mortgage</MudMenuItem>
            <MudMenuItem OnClick="AddHousingExpenseClicked">Add Expense</MudMenuItem>
        </ChildContent>
    </MudMenu>
}

@code {
    [CascadingParameter]
    Budget? Budget { get; set; }

    [CascadingParameter]
    EventCallback<Budget> BudgetChanged { get; set; }


    private async Task MortgageChanged(int oldHashCode, AmortizedLoan loan)
    {
        if (Budget?.HousingLoans is null) return;
        try 
        {
            var housingLoans = Budget.HousingLoans.Where(i => i.GetHashCode() != oldHashCode);
            Budget = Budget with { HousingLoans = Budget.HousingLoans.Append(loan) };
            
            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to update loan", Severity.Warning);
        }
    }

    private async Task MortgageDeleted(int oldHashCode, AmortizedLoan loan)
    {
        if (Budget?.HousingLoans is null) return;
        try 
        {
            Budget = Budget with { HousingLoans = Budget.HousingLoans.Where(i => i.GetHashCode() != oldHashCode) };
            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to delete loan", Severity.Warning);
        }
    }

    private async Task AddMortgageClicked()
    {
        if (Budget is null) return;
        if (Budget.HousingLoans is null) 
            Budget = Budget with { HousingLoans = new List<AmortizedLoan>() };

        Budget = Budget with { HousingLoans = Budget.HousingLoans.Append(new AmortizedLoan(Name: "Mortgage", LoanAmount: 0, RemainingBalance: 0, AnnualInterestRate: 0, LoanTermYears: 0)) };

        Logger.LogTrace("Budget changed");
        await BudgetChanged.InvokeAsync(Budget);
    }

    private async Task ExpenseChanged(int oldHashCode, Expense expense)
    {
        if (Budget?.Expenses is null) return;
        try 
        {
            var expenses = Budget.Expenses.Where(i => i.GetHashCode() != oldHashCode);
            Budget = Budget with { Expenses = expenses.Append(expense) };

            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to update loan", Severity.Warning);
        }
    }

    private async Task ExpenseDeleted(int oldHashCode, Expense expense)
    {
        if (Budget?.Expenses is null) return;
        try 
        {
            Budget = Budget with { Expenses = Budget.Expenses.Where(i => i.GetHashCode() != oldHashCode) };

            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to delete loan", Severity.Warning);
        }
    }

    private async Task AddHousingExpenseClicked()
    {
        if (Budget is null) return;
        if (Budget.Expenses is null) 
            Budget = Budget with { Expenses = new List<Expense>() };

        Budget = Budget with { Expenses = Budget.Expenses.Append(new Expense(Name: "Expense", Amount: 0, Frequency: Frequency.Monthly, ExpenseType: ExpenseType.Housing )) };

        Logger.LogTrace("Budget changed");
        await BudgetChanged.InvokeAsync(Budget);
    }
}