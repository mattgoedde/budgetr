<MudTable Items="_deductions"
          T="Deduction"
          CommitEditTooltip="Save"
          ApplyButtonPosition="TableApplyButtonPosition.End"
          CanCancelEdit
          OnCommitEditClick="SaveButton"
          Hover
          Dense
          Striped
          ReadOnly="false">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Frequency</MudTh>
    </HeaderContent>
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title.Humanize(LetterCasing.Title)</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddButton" />
    </ToolBarContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
        <MudTd DataLabel="Deduction Type">@context.DeductionType.ToString()</MudTd>
        <MudTd DataLabel="Frequency">@context.Frequency.ToString()</MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteButton(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField T="string" Value="@context.Name" ValueChanged="(value) => NameChanged(context, value)" Required />
        </MudTd>
        <MudTd DataLabel="Amount">
            <CurrencyField Value="@context.Amount" ValueChanged="(value) => AmountChanged(context, value)" Required />
        </MudTd>
        <MudTd DataLabel="Deduction Type">
            <DeductionTypeSelector DeductionType="@context.DeductionType" DeductionTypeChanged="(value) => DeductionTypeChanged(context, value)" Required />
        </MudTd>
    </RowEditingTemplate>
    <NoRecordsContent>
        <MudText>No @(string.IsNullOrWhiteSpace(Title) ? "deductions" : Title.Pluralize())</MudText>
    </NoRecordsContent>
</MudTable>
    @code {
    #region parameters
    [Parameter, EditorRequired]
    public string Title { get; set; } = "";

    [Parameter]
    public IEnumerable<Deduction> Deductions { get; set; } = Enumerable.Empty<Deduction>();
    private List<Deduction> _deductions
    {
        get => Deductions.ToList();
        set
        {
            if (value.All(d => d.Frequency == Frequency))
            {
                Deductions = value;
                DeductionsChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<IEnumerable<Deduction>> DeductionsChanged { get; set; }

    [Parameter]
    public Frequency Frequency 
    {
        get => _frequency;
        set
        {
            if (_frequency != value)
            {
                _deductions = _deductions.Select(d => d.As(value)).ToList();
                _frequency = value;
            }
        }
    }
    private Frequency _frequency;
    #endregion parameters

    private void AddButton()
    {
        _deductions.Add(Deduction.New());
    }

    private void DeleteButton(Deduction value)
    {
        _deductions.Remove(value);
    }

    private async Task SaveButton()
    {
        if (_deductions.All(d => d.Frequency == Frequency))
            await DeductionsChanged.InvokeAsync(_deductions);
    }

    private bool Validate()
    {
        return _deductions.All(d => d.Frequency == Frequency);
    }

    private void NameChanged(Deduction deduction, string name)
    {
        _deductions.Remove(deduction);
        _deductions.Add(deduction with { Name = name });
    }

    private void AmountChanged(Deduction deduction, double amount)
    {
        _deductions.Remove(deduction);
        _deductions.Add(deduction with { Amount = amount });
    }

    private void DeductionTypeChanged(Deduction deduction, DeductionType deductionType)
    {
        _deductions.Remove(deduction);
        _deductions.Add(deduction with { DeductionType = deductionType });
    }
}