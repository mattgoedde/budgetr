@inject ISnackbar Snackbar

<MudCard Elevation="4">
    <MudCardContent>
        <MudText>@Expense.Name</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => _editDialogOpen = true"/>
        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Primary" OnClick="() => _infoDialogOpen = true"/>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => _deleteDialogOpen = true"/>
    </MudCardActions>
</MudCard>

<MudDialog @bind-IsVisible="_editDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Edit Expense
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack>
            <MudStack Row Style="width:100%" Class="d-flex justify-center">
                <MudPaper Elevation="4" Class="pa-2 d-flex flex-column flex-grow-1">
                    <MudTextField Value="@_expense.Name" ValueChanged="NameChanged" T="string" Label="Expense Name" Required="true" RequiredError="Expense name is required!"/>
                    <CurrencyField Required Value="@_expense.Amount" ValueChanged="AmountChanged" Label="Starting Amount"/>
                    <FrequencySelector Required Frequency="@_expense.Frequency" FrequencyChanged="FrequencyChanged"/>
                    <ExpenseTypeSelector Required ExpenseType="@_expense.ExpenseType" ExpenseTypeChanged="ExpenseTypeChanged" />
                </MudPaper>
                <DesktopOnly>
                    <MudPaper Elevation="4" Class="pa-2 d-flex flex-column flex-grow-1">
                        <MudText>Quick View</MudText>
                        <FrequencySelector @bind-Frequency="_outputFrequency"/>
                        <CurrencyField ReadOnly Value="@_expense.As(_outputFrequency).Amount"/>
                    </MudPaper>
                </DesktopOnly>
            </MudStack>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelButton">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EditExpense">Save</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_infoDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Expense Info
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="_deleteDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Delete Expense
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>
            Are you sure you would like to delete?
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelButton">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteExpense">Delete</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public Expense Expense { get; set; } = Expense.New();
    [Parameter]
    public EventCallback<Expense> ExpenseChanged { get; set; }
    [Parameter]
    public EventCallback<Expense> ExpenseDeleted { get; set; }

    private Expense _expense = Expense.New();

    private Frequency _outputFrequency = Frequency.Yearly;

    private bool _editDialogOpen = false;
    private bool _infoDialogOpen = false;
    private bool _deleteDialogOpen = false;

    private DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        DisableBackdropClick = true
    };

    protected override void OnParametersSet()
    {
        _expense = Expense with { };
    }

    private void NameChanged(string name)
    {
        _expense = _expense with { Name = name };
    }

    private void AmountChanged(double amount)
    {
        _expense = _expense with { Amount = amount };
    }

    private void FrequencyChanged(Frequency frequency)
    {
        _expense = _expense.As(frequency);
    }

    private void ExpenseTypeChanged(ExpenseType expenseType)
    {
        _expense = _expense with { ExpenseType = expenseType };
    }

    private void CancelButton()
    {
        _editDialogOpen = false;
        _infoDialogOpen = false;
        _deleteDialogOpen = false;
        _expense = Expense with { };
    }

    private async Task DeleteExpense()
    {
        _deleteDialogOpen = false;
        await Task.Delay(1); // so unfortunate that we need this lol
        await ExpenseDeleted.InvokeAsync(Expense);
    }

    private async Task EditExpense()
    {
        _editDialogOpen = false;
        await Task.Delay(1); // so unfortunate that we need this lol
        await ExpenseChanged.InvokeAsync(_expense);
    }
}