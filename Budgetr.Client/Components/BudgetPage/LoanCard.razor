@inject ISnackbar Snackbar

<MudCard Elevation="4">
    <MudCardContent>
        <MudText>@Loan.Name</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => _editDialogOpen = true"/>
        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Primary" OnClick="() => _infoDialogOpen = true"/>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => _deleteDialogOpen = true"/>
    </MudCardActions>
</MudCard>

<MudDialog @bind-IsVisible="_editDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Edit Loan
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack>
            <MudStack Row Style="width:100%" Class="d-flex justify-center">
                <MudPaper Elevation="4" Class="pa-2 d-flex flex-column flex-grow-1">
                    <MudTextField Value="@_loan.Name" ValueChanged="NameChanged" T="string" Label="Loan Name" Required="true" RequiredError="Loan name is required!"/>
                    <CurrencyField Required Value="@_loan.LoanAmount" ValueChanged="LoanAmountChanged" Label="Starting Amount"/>
                    <CurrencyField Required Value="@_loan.RemainingBalance" ValueChanged="RemainingBalanceChanged" Label="Remaining Amount"/>
                    <MudNumericField Required Value="@_loan.AnnualInterestRate" ValueChanged="AnnualInterestRateChanged" Label="Annual Interest Rate" T="double"/>
                    <MudNumericField Required Value="@_loan.LoanTermYears" ValueChanged="LoanTermYearsChanged" Label="Loan Term (Years)" T="int" />
                </MudPaper>
                <DesktopOnly>
                    <MudPaper Elevation="4" Class="pa-2 d-flex flex-column flex-grow-1">
                        <MudText>Quick View</MudText>
                    </MudPaper>
                </DesktopOnly>
            </MudStack>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelButton">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EditLoan">Save</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_infoDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Loan Info
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
        <MudText>Info Report</MudText>
    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="_deleteDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Delete Loan
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>
            Are you sure you would like to delete?
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelButton">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteLoan">Delete</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public AmortizedLoan Loan { get; set; } = AmortizedLoan.New();
    [Parameter]
    public EventCallback<AmortizedLoan> LoanChanged { get; set; }
    [Parameter]
    public EventCallback<AmortizedLoan> LoanDeleted { get; set; }

    private AmortizedLoan _loan = AmortizedLoan.New();

    private bool _editDialogOpen = false;
    private bool _infoDialogOpen = false;
    private bool _deleteDialogOpen = false;

    private DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        DisableBackdropClick = true
    };

    protected override void OnParametersSet()
    {
        _loan = Loan with { };
    }

    private void NameChanged(string name)
    {
        _loan = _loan with { Name = name };
    }

    private void LoanAmountChanged(double loanAmount)
    {
        _loan = _loan with { LoanAmount = loanAmount };
    }

    private void RemainingBalanceChanged(double remainingBalance)
    {
        _loan = _loan with { RemainingBalance = remainingBalance };
    }
    
    private void AnnualInterestRateChanged(double annualInterestRate)
    {
        _loan = _loan with { AnnualInterestRate = annualInterestRate };
    }

    private void LoanTermYearsChanged(int loanTermYears)
    {
        _loan = _loan with { LoanTermYears = loanTermYears };
    }

    private void CancelButton()
    {
        _editDialogOpen = false;
        _infoDialogOpen = false;
        _deleteDialogOpen = false;
        _loan = Loan with { };
    }

    private async Task DeleteLoan()
    {
        _deleteDialogOpen = false;
        await Task.Delay(1); // so unfortunate that we need this lol
        await LoanDeleted.InvokeAsync(Loan);
    }

    private async Task EditLoan()
    {
        _editDialogOpen = false;
        await LoanChanged.InvokeAsync(_loan);
    }
}