@inject ISnackbar Snackbar

@inject ILogger<ExpensesTab> Logger

@if (Budget?.Expenses is not null)
{
    <MudGrid>
        @foreach (var expense in Budget.Expenses.Where(e => e.ExpenseType != ExpenseType.Transportation && e.ExpenseType != ExpenseType.Housing))
        {
            <MudItem xs="12" md="2">
                <ExpenseCard Expense="expense" 
                    ExpenseChanged="((newExpense) => ExpenseChanged(expense.GetHashCode(), newExpense))"
                    ExpenseDeleted="((delExpense) => ExpenseDeleted(expense.GetHashCode(), delExpense))" />
            </MudItem>
        }
    </MudGrid>
    <MudFab Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="position: fixed; right: 1rem; bottom: 1rem;" OnClick="AddOtherExpenseClicked"/>
}
@code {
    [CascadingParameter]
    Budget? Budget { get; set; }

    [CascadingParameter]
    EventCallback<Budget> BudgetChanged { get; set; }

    private async Task ExpenseChanged(int oldHashCode, Expense expense)
    {
        if (Budget?.Expenses is null) return;
        try 
        {
            var expenses = Budget.Expenses.Where(i => i.GetHashCode() != oldHashCode);
            Budget = Budget with { Expenses = Budget.Expenses.Append(expense) };

            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to update loan", Severity.Warning);
        }
    }

    private async Task ExpenseDeleted(int oldHashCode, Expense expense)
    {
        if (Budget?.Expenses is null) return;
        try 
        {
            Budget = Budget with { Expenses = Budget.Expenses.Where(i => i.GetHashCode() != oldHashCode) };

            Logger.LogTrace("Budget changed");
            await BudgetChanged.InvokeAsync(Budget);
        }
        catch 
        {
            Snackbar.Add("Failed to delete loan", Severity.Warning);
        }
    }

    private async Task AddOtherExpenseClicked()
    {
        if (Budget is null) return;
        if (Budget.Expenses is null) 
            Budget = Budget with { Expenses = new List<Expense>() };

        Budget = Budget with { Expenses = Budget.Expenses.Append(Expense.New()) };

        Logger.LogTrace("Budget changed");
        await BudgetChanged.InvokeAsync(Budget);
    }
}