@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IAuthorizationProvider AuthProvider
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized>
        <MudButton Href="/profile" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Person">@_name</MudButton>
        <MudMenu Dense Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
            <MudMenuItem OnClick="BeginLogout">Log out</MudMenuItem>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudButton Href="authentication/login" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Person">Log in</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code{

    private string _name = "";

    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += async (a) => await AuthenticationStateChanged(a);
    }

    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private async Task AuthenticationStateChanged(Task<AuthenticationState> authStateTask)
    {
        var authState = await authStateTask;
        if (authState?.User?.Identity?.IsAuthenticated ?? false)
        {
            var user = await AuthProvider.GetUserAsync();
            _name = user?.FirstName ?? "User";
            StateHasChanged();
        }
    }
}
