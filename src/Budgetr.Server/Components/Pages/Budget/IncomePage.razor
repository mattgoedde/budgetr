@page "/budget/income"

@inject AuthenticationStateProvider authStateProvider
@inject BudgetrDbContext db

<FluentToolbar Style="width: 100%;">
    <FluentLabel>Incomes</FluentLabel>
    <FluentSpacer />
    <FluentButton IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="AddButton"/>
</FluentToolbar>
@if (Budget?.Incomes?.Any() ?? false)
{
    <FluentStack Orientation="@Orientation.Vertical">
        @foreach (var income in Budget.Incomes)
        {
            var i = income;
            <IncomeCard @bind-Value="i" @bind-Value:after="SaveAsync" ValueDeleted="DeleteIncomeAsync" />
        }
    </FluentStack>
}

@code {
    [CascadingParameter]
    public Budget? Budget { get; set; }

    async Task AddButton()
    {
        try
        {
            if (Budget is null) return;

            var oid = await authStateProvider.GetObjectId();
            if (oid is null || oid == Guid.Empty) return;

            await db.Incomes.AddAsync(new Income
            {
                Name = "New Income",
                Amount = 0,
                Frequency = Frequency.Yearly,
                Budget = Budget,
                BudgetId = Budget.Id,
                UserId = oid ?? throw new InvalidOperationException()
            });
        }
        catch (Exception ex)
        {

        }
        finally
        {
            await SaveAsync();
        }
    }

    async Task DeleteIncomeAsync(Income item)
    {
        try
        {
            db.Incomes.Remove(item);
        }
        catch (Exception ex)
        {

        }
        finally
        {
            await SaveAsync();
        }
    }

    async Task SaveAsync()
    {
        try
        {
            await db.SaveChangesAsync();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            StateHasChanged();
        }
    }
}
