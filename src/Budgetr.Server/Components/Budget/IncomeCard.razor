@inject IDialogService dialogService
@inject AuthenticationStateProvider authStateProvider

@if (Value is not null)
{
    <FluentCard AreaRestricted="false">
        <FluentToolbar Style="width: 100%;">
            <FluentSpacer />
            <FluentButton OnClick="DeleteButton">
                <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
            </FluentButton>
        </FluentToolbar>
        <FluentStack Orientation="@Orientation.Horizontal">
            <FluentStack Orientation="@Orientation.Vertical">
                <div>
                    <FluentTextField Label="Name" @bind-Value="@Value.Name" @bind-Value:after="FieldChanged" />
                </div>
                <div>
                    <FluentNumberField Label="Amount" Step="0.01" HideStep="true" @bind-Value="@Value.Amount" @bind-Value:after="FieldChanged">
                        <FluentIcon Value="@(new Icons.Regular.Size16.CurrencyDollarEuro())" Slot="start"/>
                    </FluentNumberField>
                </div>
                <div>
                    <EnumSelect Label="Frequency" @bind-Value="@Value.Frequency" @bind-Value:after="FrequencyChanged" />
                </div>
            </FluentStack>
            <FluentStack Orientation="@Orientation.Vertical">
                <FluentToolbar>
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="DeductionAddButton" />
                </FluentToolbar>
                <FluentDataGrid Items="@Value.Deductions?.AsQueryable()" Style="width: 100%;">
                    <PropertyColumn Title="Name" Property="@(d => d.Name)" />
                    <PropertyColumn Title="Amount" Property="@(d => d.Amount)" Format="c" />
                    <PropertyColumn Title="Type" Property="@(d => d.DeductionType)" />
                    <TemplateColumn>
                        <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => DeductionEditButton(context))"/>
                        <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeductionDeleteButton(context))" />
                    </TemplateColumn>
                </FluentDataGrid>
            </FluentStack>
        </FluentStack>
    </FluentCard>
}

@code {
    [Parameter]
    public Income? Value 
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }
    private Income? _value;

    [Parameter]
    public EventCallback<Income> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<Income> ValueDeleted { get; set; }

    async Task FrequencyChanged()
    {
        // update the deductions to have the same frequency as their income
        if (Value?.Deductions?.Any() ?? false)
        {
            foreach (var deduction in Value.Deductions)
            {
                deduction.Frequency = Value.Frequency;
            }
        }

        await FieldChanged();
    }

    async Task FieldChanged()
    {
        await ValueChanged.InvokeAsync(Value);
    }

    async Task DeleteButton()
    {
        await ValueDeleted.InvokeAsync(Value);
    }

    async Task DeductionEditButton(Deduction item)
    {
        try
        {
            if (Value is null) return;

            var dialog = await dialogService.ShowPanelAsync<DeductionDialog>(item, new DialogParameters
            {
                Title = "Edit Deduction"
            });

            var dialogResult = await dialog.Result;

            if (dialogResult.Cancelled) return;

            if (dialogResult.Data is Deduction editedItem)
            {
                item = editedItem;
            }
        }
        catch (Exception ex)
        {

        }
        finally
        {
            await FieldChanged();
        }
    }

    async Task DeductionAddButton()
    {
        try
        {
            if (Value is null) return;

            var oid = await authStateProvider.GetObjectId();
            if (oid is null || oid == Guid.Empty) return;

            var item = new Deduction
            {
                Name = "New Deduction",
                DeductionType = DeductionType.Tax,
                Amount = 0,
                Frequency = Value.Frequency,
                Budget = Value.Budget,
                BudgetId = Value.Budget.Id,
                Income = Value,
                IncomeId = Value.Id,
                UserId = oid ?? throw new InvalidOperationException()
            };

            if (Value is null) return;

            var dialog = await dialogService.ShowPanelAsync<DeductionDialog>(item, new DialogParameters
            {
                Title = "Add Deduction"
            });

            var dialogResult = await dialog.Result;

            if (dialogResult.Cancelled) return;

            if (dialogResult.Data is Deduction addedItem)
            {
                Value.Deductions ??= new List<Deduction>();
                Value.Deductions.Add(addedItem);
            }
        }
        catch (Exception ex)
        {

        }
        finally
        {
            await FieldChanged();
        }
    }

    async Task DeductionDeleteButton(Deduction item)
    {
        try
        {
            Value?.Deductions?.Remove(item);
        }
        catch (Exception ex)
        {

        }
        finally
        {
            await FieldChanged();
        }
    }
}
