@page "/profile/budgets"

@inject ILogger<BudgetPage> logger
@inject IToastService toast
@inject IDialogService dialog
@inject BudgetrApiService api

<FluentToolbar>
    <FluentSelect Items="@budgets" OptionValue="@(b => b.BudgetId.ToString())" OptionText="@(b => b.BudgetName)" @bind-SelectedOption="@selectedBudget" />
    <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@DeleteButtonAsync"/>
    <FluentButton IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@AddButtonAsync"/>
    <FrequencySelect @bind-Value="@frequency" />
</FluentToolbar>

@if (selectedBudget is not null)
{
    <FluentGrid>
        <FluentGridItem>
            <a href="@($"/profile/budgets/{selectedBudget.BudgetId}/income")">
                <FluentCard>
                    <FluentHeader>
                        Gross Income
                    </FluentHeader>
                    <div>
                        @selectedBudget?.GrossIncome
                    </div>
                </FluentCard>
            </a>
        </FluentGridItem>
        <FluentGridItem>
            <a href="@($"/profile/budgets/{selectedBudget.BudgetId}/income")">
                <FluentCard>
                    <FluentHeader>
                        Net Income
                    </FluentHeader>
                    <div>
                        @selectedBudget?.NetIncome
                    </div>
                </FluentCard>
            </a>
        </FluentGridItem>
    </FluentGrid>
}

@code {
    Frequency frequency = Frequency.Monthly;
    BudgetSummaryModel? selectedBudget;
    IEnumerable<BudgetSummaryModel> budgets = Enumerable.Empty<BudgetSummaryModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await RefreshDataAsync();
    }

    async Task AddButtonAsync()
    {
        await AddBudgetAsync();
    }

    async Task DeleteButtonAsync()
    {
        await DeleteBudgetAsync();
    }

    async Task AddBudgetAsync()
    {
        try
        {
            var addDialog = await dialog.ShowPanelAsync<BudgetAddPanel, Budget>(new DialogParameters<Budget>
                {
                    Title = "Add Budget",
                    Content = new Budget(),
                    Alignment = HorizontalAlignment.Right
                });
            
            var result = await addDialog.Result;

            if (result.Cancelled) return;
            if (result.Data is null) return;

            var newBudget = result.Data as Budget;

            if(newBudget is null) return;

            await api.CreateBudget(newBudget);
        }
        catch (Exception ex)
        {
            toast.ShowError("Error creating new budget");
            logger.LogError(ex, "Error creating new budget");
        }
        finally
        {
            await RefreshDataAsync();
        }
    }

    async Task DeleteBudgetAsync()
    {
        try
        {
            if (selectedBudget is null) return;

            var deleteConfirmation = await dialog.ShowConfirmationAsync("Are you sure?", title: $"Delete {selectedBudget?.BudgetName}");

            var result = await deleteConfirmation.Result;

            if (result.Cancelled) return;

            await api.DeleteBudget(selectedBudget?.BudgetId ?? throw new Exception("Null budget"));
        }   
        catch (Exception ex)
        {
            toast.ShowError($"Error deleting {selectedBudget?.BudgetName ?? "budget"}");
            logger.LogError(ex, "Error deleting budget");
        } 
        finally
        {
            await RefreshDataAsync();
        }
    }

    async Task RefreshDataAsync()
    {
        try
        {
            budgets = await api.GetSummaries();
        }
        catch (Exception ex)
        {
            toast.ShowError($"Error retrieving your data");
            logger.LogError(ex, "Error retrieving budget summaries");
            budgets = Enumerable.Empty<BudgetSummaryModel>();
        }
        finally
        {
            StateHasChanged();
        }
    }
}
